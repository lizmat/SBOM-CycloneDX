=begin pod

=head1 NAME

SBOM::CycloneDX - Software Bill Of Materials, CycloneDX style

=head1 SYNOPSIS

=begin code :lang<raku>
use SBOM::CycloneDX;

my $from-path = SBOM::CycloneDX.new($path);  # read from path

my $from-io = SBOM::CycloneDX.new($io);      # read from IO object

my $minimal = SBOM::CycloneDX.new(           # create from named args
  bomFormat   => "CycloneDX",
  specVersion => "1.6"
);
=end code

=head1 DESCRIPTION

C<SBOM::CycloneDX> provides a distribution for the implementation of
the Software Bill Of Materials standard provided by CycloneDX using
the L<JSON Reference version 1.6|https://cyclonedx.org/docs/1.6/json/>.

=head1 SCRIPTS

=head2 cyclonedx

=begin output
$ cyclonedx t/valid/valid-metadata-tool-1.6.json
't/valid/valid-metadata-tool-1.6.json' is a valid CycloneDX SBOM
=end output

The C<cyclonedx> script takes B<one> positional argument: the
path of a CycloneDX file.  It will attempt to load the file and
report on any errors seen (if possible).  Sets C<$!> to C<1> if
an error occurred, or C<0> if all is ok.

Accepts the following optional named arguments:
=table
parameter | description
----------+------------
--raw     | whether to show raw errors
--silent  | whether to be silent on success

=begin output
$ cyclonedx t/valid/valid-metadata-tool-1.6.json --silent
$ echo $!
0
=end output

=head2 cyclonedx-enums

=begin output
$ cyclonedx-enums
All possible enum classes:

AccessMode
Acknowledgement
...

$ cyclonedx-enums AccessMode
All possible values in the 'AccessMode' enum:

read-only
read-write
...
=end output

The C<cyclonedx> script takes B<one> optional positional argument:
the name of the enum class to display information for.  It defaults
to C<all>, in which case all possible enum classes will be displayed.

Accepts the following optional named arguments:
=table
parameter | description
----------+------------
--verbose | whether to also show the associated WHY info
--silent  | whether to not show headers

=head1 INTROSPECTION METHODS

A number of introspection methods will be provided, making it easier
to search for certain conditions in a given SBOM.  Suggestions for
types of introspection are very welcome.

=head1 TOP LEVEL ARGUMENTS

This provides an overview of the named arguments that can be passed
to the top level C<SBOM::CycloneDX> object.

=begin output :type<top>
=end output

=head1 ENUMS PROVIDED

The C<SBOM::enums> module provides a number of functional enum values.
Note however that these are B<NOT> enums in the pure Raku sense, but
Raku classes doing the C<Enumify> role.  This to allow for an easy check
to see whether a given string is allowed for the given "enum".

=begin code :lang<raku>
use SBOM::enums;  # import *all* enum classes

say ComponentType<application>;  # ComponentType("application")
say ComponentType<foo>;          # Nil

say ComponentType{$name};
=end code

One can check for the validity of a string for the given enum class
by considering it an C<Associative>.

=begin code :lang<raku>
use SBOM::enums <DataFlow>;  # Just import DataFlow enum

say DataFlow.WHY;           # Specifies information about the directional...
say DataFlow<inbound>.WHY;  # Data that enters a service.

=end code

If only interested in one or more enum classes, then these can be
specified as positional arguments in the C<use> statement.  If one
wants to know what a specific enum class is about, one can call the
C<WHY> method on it, either on an enum instance (to get information
about that particular enum), or on the whole enum class (when called
on the enum type).

=begin code :lang<raku>
use SBOM::enums <DataFlow>;  # Just import DataFlow enum

say DataFlow.keys;  # (bi-directional inbound outbound unknown)
=end code

The C<keys> method can be called on the type object of an enum class
to get a sorted list of allowable strings.

=begin code :lang<raku>
use SBOM::enums <Enumify>;  # Just import Enumify role

say Enumify.keys;   # (AccessMode Acknowledgement Activity...
=end code

The C<keys> method can also be called on the underlying C<Enumify>
role to obtain a sorted list of the names of all classes of enums
available.

=head1 CREDITS

The SBOM test files in the C<t/valid> directory  were taken from
L<Giuseppe Di Terlizzi's SBOM::CycloneDX repoository|https://github.com/giterlizzi/perl-SBOM-CycloneDX/>.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
