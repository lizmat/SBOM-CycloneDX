=begin pod

=head1 NAME

SBOM::CycloneDX - Software Bill Of Materials, CycloneDX style

=head1 SYNOPSIS

=begin code :lang<raku>
use SBOM::CycloneDX;

my $from-path = SBOM::CycloneDX.new($path);  # read from path

my $from-io = SBOM::CycloneDX.new($io);      # read from IO object

my $minimal = SBOM::CycloneDX.new(           # create from named args
  bomFormat   => "CycloneDX",
  specVersion => "1.6"
);
=end code

=head1 DESCRIPTION

C<SBOM::CycloneDX> provides a distribution for the implementation of
the Software Bill Of Materials standard provided by CycloneDX using
the L<JSON Reference version 1.6|https://cyclonedx.org/docs/1.6/json/>.

=head1 SCRIPTS

=head2 cyclonedx

=begin output
$ cyclonedx t/valid/valid-metadata-tool-1.6.json
't/valid/valid-metadata-tool-1.6.json' is a valid CycloneDX SBOM
=end output

The C<cyclonedx> script takes B<one> positional argument: the
path of a CycloneDX file.  It will attempt to load the file and
report on any errors seen (if possible).  Sets C<$!> to C<1> if
an error occurred, or C<0> if all is ok.

Accepts the following optional named arguments:
=table
parameter | description
----------+------------
--raw     | whether to show raw errors
--silent  | whether to be silent on success

=begin output
$ cyclonedx t/valid/valid-metadata-tool-1.6.json --silent
$ echo $!
0
=end output

=head2 cyclonedx-enums

=begin output
$ cyclonedx-enums
All possible enum classes:

AccessMode
Acknowledgement
...

$ cyclonedx-enums AccessMode
All possible values in the 'AccessMode' enum:

read-only
read-write
...
=end output

The C<cyclonedx> script takes B<one> optional positional argument:
the name of the enum class to display information for.  It defaults
to C<all>, in which case all possible enum classes will be displayed.

Accepts the following optional named arguments:
=table
parameter | description
----------+------------
--verbose | whether to also show the associated WHY info
--silent  | whether to not show headers

=head1 INTROSPECTION METHODS

A number of introspection methods will be provided, making it easier
to search for certain conditions in a given SBOM.  Suggestions for
types of introspection are very welcome.

=head1 CLASSES PROVIDED

All classes can be instantiated by calling the C<.new> method with
named arguments.  Each named argument can either be a C<SBOM::> object,
or a hash containing named arguments.

=head2 SBOM::CycloneDX

=head1 SUBSETS PROVIDED

=head2 bom-ref

Identifier which can be used to reference a component in the BOM. Every
bom-ref must be unique within the BOM. Must be at least 1 characters
long.

=head2 bom-refOrLink

Reference that is either a bom-ref or a bomLinkElement

=head2 confidenceValue

The confidence value between and inclusive of 0 and 1, where 1 is 100%
confidence.

=head2 conformanceValue

The conformance value between and inclusive of 0 and 1, where 1 is 100%
conformant.

=head2 contentHash

The value of a hash. Must match regular expression:
^([a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}|[a-fA-F0-9]{96}|[a-fA-F0-9]{128})$.

=head2 CPE

A CPE must conform to the CPE 2.2 or 2.3 specification. See
https://nvd.nist.gov/products/cpe.

=head2 CRE

A Common Requirements Enumeration (CRE) identifier. CRE is a structured
and standardized framework for uniting security standards and
guidelines. CRE links each section of a resource to a shared topic
identifier (a Common Requirement). Through this shared topic link, all
resources map to each other. Use of CRE promotes clear and unambiguous
communication among stakeholders.

=head2 email

An email address.

=head2 Endpoint

An endpoint for a source or destination of data.

=head2 IDnotbomLink

Identifier for referable and therefore interlinkable elements. Value
SHOULD not start with the BOM-Link intro 'urn:cdx:' to avoid conflicts
|with BOM-Links.

=head2 locale

The ISO-639 (or higher) language code and optional ISO-3166 (or higher)
country code. Examples include: "en", "en-US", "fr" and "fr-CA". Must
match regular expression: ^([a-z]{2})(-[A-Z]{2})?$.

=head2 mime-type

A MIME-type. Must match regular expression: ^[-+a-z0-9.]+/[-+a-z0-9.]+$

=head2 nistQuantumSecurityLevel

The NIST security strength category as defined in
https://csrc.nist.gov/projects/post-quantum-cryptography/post-quantum-cryptography-standardization/evaluation-criteria/security-(evaluation-criteria).
A value of 0 indicates that none of the categories are met.

=head2 number

A numeric value.

=head2 omniborId

An OmniBOR Artifact ID. The OmniBOR, if specified, must be valid and
conform to the specification defined at:
https://www.iana.org/assignments/uri-schemes/prov/gitoid.

=head2 PositiveInt

A positive integer value (> 0).

=head2 propertyName

A reference to the property name as defined in the CycloneDX Property
Taxonomy.

=head2 PURL

A package-url (purl). The purl, if specified, must be valid and conform
to the specification defined at:
https://github.com/package-url/purl-spec.

=head2 referenceURL

Either a URL, a bomLinkDocument or a bomLinkElement.

=head2 serialNumber

Every BOM generated SHOULD have a unique serial number, even if the
contents of the BOM have not changed over time. If specified, the serial
number must conform to RFC 4122. Use of serial numbers is recommended.
Must match regular expression:
^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$

=head2 SWHID

A Software Heritage persistent identifier (SWHID). The SWHID, if
specified, must be valid and conform to the specification defined at:
https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html.

=head2 UInt

An unsigned integer value (>= 0)

=head2 URL

A URL.

=head2 versionRange

A version range specified in Package URL Version Range syntax (vers)
which is defined at
https://github.com/package-url/purl-spec/blob/master/VERSION-RANGE-SPEC.rst

=head2 versionString

A version should ideally comply with semantic versioning but is not
enforced. Must be at most 1024 characters long.

=head1 SUBSETS API

=begin code :lang<raku>
use SBOM::subsets <serialNumber>;

my $serial = "urn:uuid:3e671687-395b-41f5-a30f-a58921a69b79";
say "valid" if $serial ~~ serialNumber;  # valid
=end code

The subsets are provided by the C<SBOM::subsets> module.  Either all
possible subsets are imported, or just the ones specifed in the
C<use> statement.

To get information about a C<subset> you can call the C<.WHY> method:

=begin code :lang<raku>
use SBOM::subsets <email>;

say email.WHY;  # An email address.
=end code

The provided information may of course be more or less verbose.

=head1 ENUMS PROVIDED

=head2 AccessMode

Describes the read-write access control for a workspace relative to the
owning resource instance.

Supported strings:
=item read-only
=item read-write
=item read-write-once
=item write-once
=item write-only

=head2 Acknowledgement

Declared licenses and concluded licenses represent two different stages
in the licensing process within software development. Declared licenses
refer to the initial intention of the software authors regarding the
licensing terms under which their code is released. On the other hand,
concluded licenses are the result of a comprehensive analysis of the
project's codebase to identify and confirm the actual licenses of the
components used, which may differ from the initially declared licenses.
While declared licenses provide an upfront indication of the licensing
intentions, concluded licenses offer a more thorough understanding of
the actual licensing within a project, facilitating proper compliance
and risk management. Observed licenses are defined in
@.evidence.licenses. Observed licenses form the evidence necessary to
substantiate a concluded license.

Supported strings:
=item concluded
=item declared

=head2 Activity

The type of activity that is part of a machine learning model
development or operational lifecycle.

Supported strings:
=item data-collection
=item data-preparation
=item deployment
=item design
=item fine-tuning
=item inference
=item other
=item training
=item validation

=head2 Aggregate

Specifies an aggregate type that describes how complete a relationship
is.

Supported strings:
=item complete
=item incomplete
=item incomplete_first_party_only
=item incomplete_first_party_opensource_only
=item incomplete_first_party_proprietary_only
=item incomplete_third_party_only
=item incomplete_third_party_opensource_only
=item incomplete_third_party_proprietary_only
=item not_specified
=item unknown

=head2 AlgorithmPrimitive

Cryptographic building blocks used in higher-level cryptographic
systems and protocols. Primitives represent different cryptographic
routines: deterministic random bit generators (drbg, e.g. CTR_DRBG from
NIST SP800-90A-r1), message authentication codes (mac, e.g.
HMAC-SHA-256), blockciphers (e.g. AES), streamciphers (e.g. Salsa20),
signatures (e.g. ECDSA), hash functions (e.g. SHA-256), public-key
encryption schemes (pke, e.g. RSA), extended output functions (xof, e.g.
SHAKE256), key derivation functions (e.g. pbkdf2), key agreement
algorithms (e.g. ECDH), key encapsulation mechanisms (e.g. ML-KEM),
authenticated encryption (ae, e.g. AES-GCM) and the combination of
multiple algorithms (combiner, e.g. SP800-56Cr2).

Supported strings:
=item ae
=item block-cipher
=item combiner
=item drbg
=item hash
=item kdf
=item kem
=item key-agree
=item mac
=item other
=item pke
=item signature
=item stream-cipher
=item unknown
=item xof

=head2 BOMFormat

Specifies the format of the BOM. This helps to identify the file as
CycloneDX since BOMs do not have a filename convention, nor does JSON
schema support namespaces.

Supported strings:
=item CycloneDX

=head2 CO2Cost

Unit of CO2 cost.

Supported strings:
=item tCO2eq

=head2 Certification

The certification that an implementation of a cryptographic algorithm
has received. Certifications include revisions and levels of FIPS 140 or
Common Criteria of different Extended Assurance Levels (CC-EAL).

Supported strings:
=item cc-eal1
=item cc-eal1+
=item cc-eal2
=item cc-eal2+
=item cc-eal3
=item cc-eal3+
=item cc-eal4
=item cc-eal4+
=item cc-eal5
=item cc-eal5+
=item cc-eal6
=item cc-eal6+
=item cc-eal7
=item cc-eal7+
=item fips140-1-l1
=item fips140-1-l2
=item fips140-1-l3
=item fips140-1-l4
=item fips140-2-l1
=item fips140-2-l2
=item fips140-2-l3
=item fips140-2-l4
=item fips140-3-l1
=item fips140-3-l2
=item fips140-3-l3
=item fips140-3-l4
=item none
=item other
=item unknown

=head2 CertificationMode

The mode of operation in which a cryptographic algorithm (block cipher)
is used.

Supported strings:
=item cbc
=item ccm
=item cfb
=item ctr
=item ecb
=item gcm
=item ofb
=item other
=item unknown

=head2 CertificationPadding

The padding scheme that is used for a cryptographic algorithm.

Supported strings:
=item oaep
=item other
=item pkcs1v15
=item pkcs5
=item pkcs7
=item raw
=item unknown

=head2 ComponentType

Specifies the type of a component.

Supported strings:
=item application
=item container
=item cryptographic-asset
=item data
=item device
=item device-driver
=item file
=item firmware
=item framework
=item library
=item machine-learning-model
=item operating-system
=item platform

=head2 Crypto

The type for the related cryptographic material

Supported strings:
=item additional-data
=item ciphertext
=item credential
=item digest
=item initialization-vector
=item key
=item nonce
=item other
=item password
=item private-key
=item public-key
=item salt
=item secret-key
=item seed
=item shared-secret
=item signature
=item tag
=item token
=item unknown

=head2 CryptoAsset

Cryptographic assets occur in several forms. Algorithms and protocols
are most commonly implemented in specialized cryptographic libraries.
They may, however, also be 'hardcoded' in software components.
Certificates and related cryptographic material like keys, tokens,
secrets or passwords are other cryptographic assets to be modelled.

Supported strings:
=item algorithm
=item certificate
=item protocol
=item related-crypto-material

=head2 CryptoFunction

A cryptographic function implemented by a cryptographic algorithm.

Supported strings:
=item decapsulate
=item decrypt
=item digest
=item encapsulate
=item encrypt
=item generate
=item keyderive
=item keygen
=item other
=item sign
=item tag
=item unknown
=item verify

=head2 CryptoKey

Public key type indicator.

Supported strings:
=item EC
=item OKP
=item RSA

=head2 CryptoProtocol

A concrete cryptographic protocol type.

Supported strings:
=item ike
=item ipsec
=item other
=item ssh
=item sstp
=item tls
=item unknown
=item wpa

=head2 CryptoState

The key state as defined by NIST SP 800-57.

Supported strings:
=item active
=item compromised
=item deactivated
=item destroyed
=item pre-activation
=item suspended

=head2 DataFlow

Specifies information about the directional flow of data.

Supported strings:
=item bi-directional
=item inbound
=item outbound
=item unknown

=head2 DataSource

The general theme or subject matter of model data being specified.

Supported strings:
=item configuration
=item dataset
=item definition
=item other
=item source-code

=head2 ECCurve

EC curve name.

Supported strings:
=item P-256
=item P-384
=item P-521

=head2 EdDSA

EdDSA curve name.

Supported strings:
=item Ed25519
=item Ed448

=head2 Encoding

Specifies the optional encoding a text is represented in.

Supported strings:
=item base64

=head2 Energy

The energy source of an energy provider.

Supported strings:
=item biofuel
=item coal
=item geothermal
=item hydropower
=item natural-gas
=item nuclear
=item oil
=item other
=item solar
=item unknown
=item wind

=head2 EnergyUnit

Unit of energy.

Supported strings:
=item kWh

=head2 Evidence

A technique used in method of analysis.

Supported strings:
=item ast-fingerprint
=item attestation
=item binary-analysis
=item dynamic-analysis
=item filename
=item hash-comparison
=item instrumentation
=item manifest-analysis
=item other
=item source-code-analysis

=head2 ExecutionEnvironment

The target and execution environment in which an algorithm is
implemented in.

Supported strings:
=item hardware
=item other
=item software-encrypted-ram
=item software-plain-ram
=item software-tee
=item unknown

=head2 Field

The identity field of the component which an evidence describes.

Supported strings:
=item cpe
=item group
=item hash
=item name
=item omniborId
=item purl
=item swhid
=item swid
=item version

=head2 HashAlgorithm

An algorithm to generate a hash value with.

Supported strings:
=item BLAKE2b-256
=item BLAKE2b-384
=item BLAKE2b-512
=item BLAKE3
=item MD5
=item SHA-1
=item SHA-256
=item SHA-384
=item SHA-512
=item SHA3-256
=item SHA3-384
=item SHA3-512

=head2 Justification

The rationale of why the impact analysis state was asserted.

Supported strings:
=item code_not_present
=item code_not_reachable
=item protected_at_perimeter
=item protected_at_runtime
=item protected_by_compiler
=item protected_by_mitigating_control
=item requires_configuration
=item requires_dependency
=item requires_environment

=head2 Learning

Learning types describing the learning problem or hybrid learning
problem.

Supported strings:
=item reinforcement-learning
=item self-supervised
=item semi-supervised
=item supervised
=item unsupervised

=head2 LicenseGranted

A type of license that was granted to the licensee.

Supported strings:
=item academic
=item appliance
=item client-access
=item concurrent-user
=item core-points
=item custom-metric
=item device
=item evaluation
=item named-user
=item node-locked
=item oem
=item other
=item perpetual
=item processor-points
=item subscription
=item user

=head2 LicenseId

A valid SPDX license identifier.

699 strings supported.

=head2 LicenseName

A valid SPDX license name.

686 strings supported.

=head2 OutputType

Describes the type of data output.

Supported strings:
=item artifact
=item attestation
=item evidence
=item log
=item metrics
=item other

=head2 Patch

Specifies the purpose for the patch including the resolution of
defects, security issues, or new behavior or functionality.

Supported strings:
=item backport
=item cherry-pick
=item monkey
=item unofficial

=head2 Phase

Lifecycles communicate the stage(s) in which data in the BOM was
captured. Different types of data may be available at various phases of
a lifecycle, such as the Software Development Lifecycle (SDLC), IT Asset
Management (ITAM), and Software Asset Management (SAM). Thus, a BOM may
include data specific to or only obtainable in a given lifecycle.

Supported strings:
=item build
=item decommision
=item design
=item discovery
=item operations
=item post-build
=item pre-build

=head2 Platform

A platform for which an algorithm is implemented.

Supported strings:
=item armv7-a
=item armv7-m
=item armv8-a
=item armv8-m
=item armv9-a
=item armv9-m
=item generic
=item other
=item ppc64
=item ppc64le
=item s390x
=item unknown
=item x86_32
=item x86_64

=head2 ReferenceSource

Specifies the type of external reference.

Supported strings:
=item adversary-model
=item advisories
=item attestation
=item bom
=item build-meta
=item build-system
=item certification-report
=item chat
=item codified-infrastructure
=item component-analysis-report
=item configuration
=item digital-signature
=item distribution
=item distribution-intake
=item documentation
=item dynamic-analysis-report
=item electronic-signature
=item evidence
=item exploitability-statement
=item formulation
=item issue-tracker
=item license
=item log
=item mailing-list
=item maturity-report
=item model-card
=item other
=item pentest-report
=item poam
=item quality-metrics
=item release-notes
=item rfc-9116
=item risk-assessment
=item runtime-analysis-report
=item security-contact
=item social
=item source-distribution
=item static-analysis-report
=item support
=item threat-model
=item vcs
=item vulnerability-assertion
=item website

=head2 ReleaseLevel

The software versioning type of a release note.

Supported strings:
=item internal
=item major
=item minor
=item patch
=item pre-release

=head2 ResolveType

A type of issue resolvement.

Supported strings:
=item defect
=item enhancement
=item security

=head2 Response

A response to the vulnerability by the manufacturer, supplier, or
project responsible for the affected component or service. Responses are
strongly encouraged for vulnerabilities where the analysis state is
exploitable.

Supported strings:
=item can_not_fix
=item rollback
=item update
=item will_not_fix
=item workaround_available

=head2 RiskMethodology

Specifies the severity or risk scoring methodology or standard used.

Supported strings:
=item CVSSv2
=item CVSSv3
=item CVSSv31
=item CVSSv4
=item OWASP
=item SSVC
=item other

=head2 Scope

The scope of a component.

Supported strings:
=item excluded
=item optional
=item required

=head2 Severity

Textual representation of a severity.

Supported strings:
=item critical
=item high
=item info
=item low
=item medium
=item none
=item unknown

=head2 SignatureAlgorithm

Signature algorithm. The currently recognized JWA [RFC7518] and RFC8037
[RFC8037] asymmetric key algorithms. Unlike RFC8037 [RFC8037] JSF
requires explicit Ed* algorithm names instead ofi "EdDSA".

Supported strings:
=item ES256
=item ES384
=item ES512
=item Ed25519
=item Ed448
=item HS256
=item HS384
=item HS512
=item PS256
=item PS384
=item PS512
=item RS256
=item RS384
=item RS512

=head2 TaskActivity

Indicates the types of activities performed by the set of workflow
tasks.

Supported strings:
=item build
=item clean
=item clone
=item copy
=item deliver
=item deploy
=item lint
=item merge
=item other
=item release
=item scan
=item test

=head2 TriggerEvent

The source type of event which caused a trigger to fire.

Supported strings:
=item api
=item manual
=item scheduled
=item webhook

=head2 VersionAffection

The vulnerability status for the version or range of versions.

Supported strings:
=item affected
=item unaffected
=item unknown

=head2 VolumeMode

The mode for a volume instance.

Supported strings:
=item block
=item filesystem

=head2 VulnerabilityState

Declares the current state of an occurrence of a vulnerability, after
automated or manual analysis.

Supported strings:
=item exploitable
=item false_positive
=item in_triage
=item not_affected
=item resolved
=item resolved_with_pedigree

=head1 ENUMS API

The C<SBOM::enums> module provides a number of functional enum values.
Note however that these are B<NOT> enums in the pure Raku sense, but
Raku classes doing the C<Enumify> role.  This to allow for an easy check
to see whether a given string is allowed for the given "enum".

=begin code :lang<raku>
use SBOM::enums;  # import *all* enum classes

say ComponentType<application>;  # ComponentType("application")
say ComponentType<foo>;          # Nil

say ComponentType{$name};
=end code

One can check for the validity of a string for the given enum class
by considering it an C<Associative>.

=begin code :lang<raku>
use SBOM::enums <DataFlow>;  # Just import DataFlow enum

say DataFlow.WHY;           # Specifies information about the...
say DataFlow<inbound>.WHY;  # Data that enters a service.

=end code

If only interested in one or more enum classes, then these can be
specified as positional arguments in the C<use> statement.  If one
wants to know what a specific enum class is about, one can call the
C<WHY> method on it, either on an enum instance (to get information
about that particular enum), or on the whole enum class (when called
on the enum type).

=begin code :lang<raku>
use SBOM::enums <DataFlow>;  # Just import DataFlow enum

say DataFlow.keys;  # (bi-directional inbound outbound unknown)
=end code

The C<keys> method can be called on the type object of an enum class
to get a sorted list of allowable strings.

=begin code :lang<raku>
use SBOM::enums <Enumify>;  # Just import Enumify role

say Enumify.keys;   # (AccessMode Acknowledgement Activity...
=end code

The C<keys> method can also be called on the underlying C<Enumify>
role to obtain a sorted list of the names of all classes of enums
available.

=head1 CREDITS

The SBOM test files in the C<t/valid> directory were taken from
L<Giuseppe Di Terlizzi's SBOM::CycloneDX repoository|https://github.com/giterlizzi/perl-SBOM-CycloneDX/>.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
