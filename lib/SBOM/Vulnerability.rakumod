use SBOM::subsets:ver<0.0.1>:auth<zef:lizmat> <
  bom-ref PositiveInt referenceURL
>;

use SBOM::Advisory:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::Analysis:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::Credits:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::Property:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::ProofOfConcept:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::Rating:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::Source:ver<0.0.1>:auth<zef:lizmat>;
use SBOM::Tool:ver<0.0.1>:auth<zef:lizmat>;

#- SourceReference -------------------------------------------------------------
#| A reference to a source that published a vulnerability.
class SBOM::SourceReference:ver<0.0.1>:auth<zef:lizmat> {

#| An identifier that uniquely identifies the vulnerability.
    has Str $.id;

#| The source that published the vulnerability.
    has SBOM::Source $.source;
}

#- Vulnerability ---------------------------------------------------------------
#| A Vulnerability identified in components or services
class SBOM::Vulnerability:ver<0.0.1>:auth<zef:lizmat> {

#| An optional identifier which can be used to reference the
#| vulnerability elsewhere in the BOM.
    has bom-ref $.bom-ref;

#| The identifier that uniquely identifies the vulnerability.
    has Str $.id;

#| The source that published the vulnerability.
    has SBOM::Source $.source;

#| Zero or more pointers to vulnerabilities that are the equivalent of
#| the vulnerability specified. Often times, the same vulnerability may
#| exist in multiple sources of vulnerability intelligence, but have
#| different identifiers. References provide a way to correlate
#| vulnerabilities across multiple sources of vulnerability intelligence.
    has SBOM::SourceReference @.references;

#| List of vulnerability ratings.
    has SBOM::Rating @.ratings;

#| List of Common Weaknesses Enumerations (CWEs) codes that describes
#| this vulnerability.  For example 399 (of
#| https://cwe.mitre.org/data/definitions/399.html).
    has PositiveInt           @.cwes;

#| A description of the vulnerability as provided by the source.
    has Str $.description;

#| If available, an in-depth description of the vulnerability as
#| provided by the source organization. Details often include
# information useful in understanding root cause.
    has Str $.detail;

#| Recommendations of how the vulnerability can be remediated or
#| mitigated.
    has Str $.recommendation;

#| A bypass, usually temporary, of the vulnerability that reduces its
#| likelihood and/or impact. Workarounds often involve changes to
#| configuration or deployments.
    has Str $.workaround;

#| Evidence used to reproduce the vulnerability.
    has SBOM::ProofOfConcept $.proofOfConcept;

#| Published advisories of the vulnerability if provided.
    has SBOM::Advisory @.advisories;

#| The date and time (timestamp) when the vulnerability record was
#| created in the vulnerability database.
    has DateTime $.created;

#| The date and time (timestamp) when the vulnerability record was
#| first published.
    has DateTime $.published;

#| The date and time (timestamp) when the vulnerability record was
#| last updated.
    has DateTime $.updated;

#| The date and time (timestamp) when the vulnerability record was
#| rejected (if applicable).
    has DateTime $.rejected;

#| Individuals or organizations credited with the discovery of the
#| vulnerability.
    has SBOM::Credits $.credits;

#| The tool(s) used to identify, confirm, or score the vulnerability.
    has SBOM::AnyTool $.tools;

#| An assessment of the impact and exploitability of the vulnerability.
    has SBOM::Analysis $.analysis;

#| The components or services that are affected by the vulnerability.
    has referenceURL @.affects;

#| Provides the ability to document properties in a name-value store.
#| This provides flexibility to include data not officially supported
#| in the standard without having to use additional namespaces or
#| create extensions. Unlike key-value stores, properties support
#| duplicate names, each potentially having different values. Property
#| names of interest to the general public are encouraged to be
#| registered in the CycloneDX Property Taxonomy. Formal registration
#| is optional.
    has SBOM::Property @.properties;
}

# vim: expandtab shiftwidth=4
